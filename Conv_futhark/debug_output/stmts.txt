[Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "zip_copy_transformed") 9954, patElemDec = Array (FloatType Float32) (Shape {shapeDims = [Var (VName (Name "num_in_ch") 7815),Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (Index (VName (Name "kernels") 7820) (Slice {unSlice = [DimSlice (Constant (IntValue (Int64Value 0))) (Var (VName (Name "num_in_ch") 7815)) (Constant (IntValue (Int64Value 1))),DimFix (Var (VName (Name "gtid") 9949)),DimSlice (Constant (IntValue (Int64Value 0))) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1))),DimSlice (Constant (IntValue (Int64Value 0))) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1)))]}))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "index_primexp") 10004, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9950)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "cmpop_y") 10005, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9950)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "binop_x") 10006, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSle Int64) (Var (VName (Name "gtid") 9950)) (Var (VName (Name "cmpop_y") 10005)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "cmpop_y") 10007, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9950)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "binop_x") 10008, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSle Int64) (Constant (IntValue (Int64Value 0))) (Var (VName (Name "cmpop_y") 10007)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "cmpop_x") 10009, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9950)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "binop_y") 10010, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSlt Int64) (Var (VName (Name "cmpop_x") 10009)) (Var (VName (Name "in_height") 7816)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "binop_y") 10011, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "binop_x") 10008)) (Var (VName (Name "binop_y") 10010)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "index_primexp") 10012, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "binop_x") 10006)) (Var (VName (Name "binop_y") 10011)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "map2__arg0") 9959, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9580]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9951)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "i_p_m_t_s") 9960, patElemDec = Prim (IntType Int64)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9580]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9951)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "zero_leq_i_p_m_t_s") 9961, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSle Int64) (Constant (IntValue (Int64Value 0))) (Var (VName (Name "i_p_m_t_s") 9960)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "i_p_m_t_s_leq_w") 9962, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSlt Int64) (Var (VName (Name "i_p_m_t_s") 9960)) (Var (VName (Name "in_width") 7817)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "i_lte_j") 9964, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9580]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (CmpOp (CmpSle Int64) (Var (VName (Name "gtid") 9951)) (Var (VName (Name "map2__arg0") 9959)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "y") 9966, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9580]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "zero_leq_i_p_m_t_s") 9961)) (Var (VName (Name "i_p_m_t_s_leq_w") 9962)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "forwards_ok") 9967, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "i_lte_j") 9964)) (Var (VName (Name "y") 9966)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "index_ok") 9968, patElemDec = Prim Bool}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9576]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "forwards_ok") 9967)) (Var (VName (Name "index_primexp") 10012)))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "index_certs") 9969, patElemDec = Prim Unit}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9576,VName (Name "range_valid_c") 9580]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (Assert (Var (VName (Name "index_ok") 9968)) (ErrorMsg [ErrorString "Index [",ErrorVal (IntType Int64) (Var (VName (Name "gtid") 9950)),ErrorString ":",ErrorVal (IntType Int64) (Var (VName (Name "index_primexp") 10004)),ErrorString ", ",ErrorVal (IntType Int64) (Var (VName (Name "gtid") 9951)),ErrorString ":",ErrorVal (IntType Int64) (Var (VName (Name "map2__arg0") 9959)),ErrorString "] out of bounds for array of shape [",ErrorVal (IntType Int64) (Var (VName (Name "in_height") 7816)),ErrorString "][",ErrorVal (IntType Int64) (Var (VName (Name "in_width") 7817)),ErrorString "]."]) (noLoc,[noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc]))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "index") 9970, patElemDec = Array (FloatType Float32) (Shape {shapeDims = [Var (VName (Name "num_in_ch") 7815),Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9576,VName (Name "range_valid_c") 9580,VName (Name "index_certs") 9969]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (Index (VName (Name "inputs") 7819) (Slice {unSlice = [DimSlice (Constant (IntValue (Int64Value 0))) (Var (VName (Name "num_in_ch") 7815)) (Constant (IntValue (Int64Value 1))),DimSlice (Var (VName (Name "gtid") 9950)) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1))),DimSlice (Var (VName (Name "gtid") 9951)) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1)))]}))},Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9971, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "index_certs") 9969]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Var (VName (Name "num_in_ch") 7815)) [VName (Name "zip_copy_transformed") 9954,VName (Name "index") 9970] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "zip_copy_transformed_row") 9972, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "zip_copy_transformed_row") 9973, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9974, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [VName (Name "zip_copy_transformed_row") 9973,VName (Name "zip_copy_transformed_row") 9972] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9975, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5))]}) NoUniqueness},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9976, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5))]}) NoUniqueness}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9977, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [VName (Name "eta_p") 9975,VName (Name "eta_p") 9976] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9978, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9979, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "lifted_lambda_res") 9980, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FMul Float32) (Var (VName (Name "eta_p") 9978)) (Var (VName (Name "eta_p") 9979)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "lifted_lambda_res") 9980)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9981, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9982, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9983, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9981)) (Var (VName (Name "eta_p") 9982)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9983)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_reduce_res") 9977)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9984, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9985, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9986, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9984)) (Var (VName (Name "eta_p") 9985)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9986)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_reduce_res") 9974)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9987, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9988, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9989, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9987)) (Var (VName (Name "eta_p") 9988)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9989)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}]