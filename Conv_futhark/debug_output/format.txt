Op (SegOp (SegMap (SegThread SegNoVirt (Just (KernelGrid {
    gridNumBlocks = Count {unCount = Var (VName (Name "segmap_usable_groups") 9924)},
    gridBlockSize = Count {unCount = Var (VName (Name "segmap_tblock_size") 9923)}}
  ))) (SegSpace {
    segFlat = VName (Name "phys_tid") 9929,
    unSegSpace = [
      (VName (Name "gtid") 9926, Var (VName (Name "num_out_ch") 7795)),
      (VName (Name "gtid") 9927, Var (VName (Name "out_height") 9547)),
      (VName (Name "gtid") 9928, Var (VName (Name "out_width") 9549))
    ]
  }) [Prim (FloatType Float32)] (KernelBody {
    kernelBodyDec = (),
    kernelBodyStms = fromList [
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "zip_copy_transformed") 9931,
            patElemDec = Array (FloatType Float32) (Shape {
              shapeDims = [
                Var (VName (Name "num_in_ch") 7792),
                Constant (IntValue (Int64Value 5)),
                Constant (IntValue (Int64Value 5))
              ]
            }) NoUniqueness
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (Index (VName (Name "kernels") 7797) (Slice {
          unSlice = [
            DimSlice (Constant (IntValue (Int64Value 0))) (Var (VName (Name "num_in_ch") 7792)) (Constant (IntValue (Int64Value 1))),
            DimFix (Var (VName (Name "gtid") 9926)),
            DimSlice (Constant (IntValue (Int64Value 0))) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1))),
            DimSlice (Constant (IntValue (Int64Value 0))) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1)))
          ]
        }))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "index_primexp") 9981,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9927)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "cmpop_y") 9982,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9927)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "binop_x") 9983,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSle Int64) (Var (VName (Name "gtid") 9927)) (Var (VName (Name "cmpop_y") 9982)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "cmpop_y") 9984,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9927)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "binop_x") 9985,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSle Int64) (Constant (IntValue (Int64Value 0))) (Var (VName (Name "cmpop_y") 9984)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "cmpop_x") 9986,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9927)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "binop_y") 9987,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSlt Int64) (Var (VName (Name "cmpop_x") 9986)) (Var (VName (Name "in_height") 7793)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "binop_y") 9988,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "binop_x") 9985)) (Var (VName (Name "binop_y") 9987)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "index_primexp") 9989,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "binop_x") 9983)) (Var (VName (Name "binop_y") 9988)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "map2__arg0") 9936,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9557]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 5))) (Var (VName (Name "gtid") 9928)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "i_p_m_t_s") 9937,
            patElemDec = Prim (IntType Int64)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9557]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp (Add Int64 OverflowWrap) (Constant (IntValue (Int64Value 4))) (Var (VName (Name "gtid") 9928)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "zero_leq_i_p_m_t_s") 9938,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSle Int64) (Constant (IntValue (Int64Value 0))) (Var (VName (Name "i_p_m_t_s") 9937)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "i_p_m_t_s_leq_w") 9939,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSlt Int64) (Var (VName (Name "i_p_m_t_s") 9937)) (Var (VName (Name "in_width") 7794)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "i_lte_j") 9941,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9557]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (CmpOp (CmpSle Int64) (Var (VName (Name "gtid") 9928)) (Var (VName (Name "map2__arg0") 9936)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "y") 9943,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9557]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "zero_leq_i_p_m_t_s") 9938)) (Var (VName (Name "i_p_m_t_s_leq_w") 9939)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "forwards_ok") 9944,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = []},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "i_lte_j") 9941)) (Var (VName (Name "y") 9943)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "index_ok") 9945,
            patElemDec = Prim Bool
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9553]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (BinOp LogAnd (Var (VName (Name "forwards_ok") 9944)) (Var (VName (Name "index_primexp") 9989)))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "index_certs") 9946,
            patElemDec = Prim Unit
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9553,VName (Name "range_valid_c") 9557]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (Assert (Var (VName (Name "index_ok") 9945)) (ErrorMsg [
          ErrorString "Index [",
          ErrorVal (IntType Int64) (Var (VName (Name "gtid") 9927)),
          ErrorString ":",
          ErrorVal (IntType Int64) (Var (VName (Name "index_primexp") 9981)),
          ErrorString ", ",
          ErrorVal (IntType Int64) (Var (VName (Name "gtid") 9928)),
          ErrorString ":",
          ErrorVal (IntType Int64) (Var (VName (Name "map2__arg0") 9936)),
          ErrorString "] out of bounds for array of shape [",
          ErrorVal (IntType Int64) (Var (VName (Name "in_height") 7793)),
          ErrorString "][",
          ErrorVal (IntType Int64) (Var (VName (Name "in_width") 7794)),
          ErrorString "]."
        ]) (noLoc,[noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc,noLoc]))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "index") 9947,
            patElemDec = Array (FloatType Float32) (Shape {
              shapeDims = [
                Var (VName (Name "num_in_ch") 7792),
                Constant (IntValue (Int64Value 5)),
                Constant (IntValue (Int64Value 5))
              ]
            }) NoUniqueness
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "range_valid_c") 9553,VName (Name "range_valid_c") 9557,VName (Name "index_certs") 9946]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = BasicOp (Index (VName (Name "inputs") 7796) (Slice {
          unSlice = [
            DimSlice (Constant (IntValue (Int64Value 0))) (Var (VName (Name "num_in_ch") 7792)) (Constant (IntValue (Int64Value 1))),
            DimSlice (Var (VName (Name "gtid") 9927)) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1))),
            DimSlice (Var (VName (Name "gtid") 9928)) (Constant (IntValue (Int64Value 5))) (Constant (IntValue (Int64Value 1)))
          ]
        }))
      },
      Let {
        stmPat = Pat {patElems = [
          PatElem {
            patElemName = VName (Name "defunc_0_reduce_res") 9948,
            patElemDec = Prim (FloatType Float32)
          }
        ]},
        stmAux = StmAux {
          stmAuxCerts = Certs {unCerts = [VName (Name "index_certs") 9946]},
          stmAuxAttrs = Attrs {unAttrs = fromList []},
          stmAuxDec = ()
        },
        stmExp = Op (OtherOp (Screma (Var (VName (Name "num_in_ch") 7792)) [
          VName (Name "zip_copy_transformed") 9931,
          VName (Name "index") 9947
        ] (ScremaForm {
          scremaLambda = Lambda {
            lambdaParams = [
              Param {
                paramAttrs = Attrs {unAttrs = fromList []},
                paramName = VName (Name "zip_copy_transformed_row") 9949,
                paramDec = Array (FloatType Float32) (Shape {
                  shapeDims = [
                    Constant (IntValue (Int64Value 5)),
                    Constant (IntValue (Int64Value 5))
                  ]
                }) NoUniqueness
              },
              Param {
                paramAttrs = Attrs {unAttrs = fromList []},
                paramName = VName (Name "zip_copy_transformed_row") 9950,
                paramDec = Array (FloatType Float32) (Shape {
                  shapeDims = [
                    Constant (IntValue (Int64Value 5)),
                    Constant (IntValue (Int64Value 5))
                  ]
                }) NoUniqueness
              }
            ],
            lambdaReturnType = [Prim (FloatType Float32)],
            lambdaBody = Body {
              bodyDec = (),
              bodyStms = fromList [
                Let {
                  stmPat = Pat {patElems = [
                    PatElem {
                      patElemName = VName (Name "defunc_0_reduce_res") 9951,
                      patElemDec = Prim (FloatType Float32)
                    }
                  ]},
                  stmAux = StmAux {
                    stmAuxCerts = Certs {unCerts = []},
                    stmAuxAttrs = Attrs {unAttrs = fromList []},
                    stmAuxDec = ()
                  },
                  stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [
                    VName (Name "zip_copy_transformed_row") 9950,
                    VName (Name "zip_copy_transformed_row") 9949
                  ] (ScremaForm {
                    scremaLambda = Lambda {
                      lambdaParams = [
                        Param {
                          paramAttrs = Attrs {unAttrs = fromList []},
                          paramName = VName (Name "eta_p") 9952,
                          paramDec = Array (FloatType Float32) (Shape {
                            shapeDims = [Constant (IntValue (Int64Value 5))]
                          }) NoUniqueness
                        },
                        Param {
                          paramAttrs = Attrs {unAttrs = fromList []},
                          paramName = VName (Name "eta_p") 9953,
                          paramDec = Array (FloatType Float32) (Shape {
                            shapeDims = [Constant (IntValue (Int64Value 5))]
                          }) NoUniqueness
                        }
                      ],
                      lambdaReturnType = [Prim (FloatType Float32)],
                      lambdaBody = Body {
                        bodyDec = (),
                        bodyStms = fromList [
                          Let {
                            stmPat = Pat {patElems = [
                              PatElem {
                                patElemName = VName (Name "defunc_0_reduce_res") 9954,
                                patElemDec = Prim (FloatType Float32)
                              }
                            ]},
                            stmAux = StmAux {
                              stmAuxCerts = Certs {unCerts = []},
                              stmAuxAttrs = Attrs {unAttrs = fromList []},
                              stmAuxDec = ()
                            },
                            stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [
                              VName (Name "eta_p") 9952,
                              VName (Name "eta_p") 9953
                            ] (ScremaForm {
                              scremaLambda = Lambda {
                                lambdaParams = [
                                  Param {
                                    paramAttrs = Attrs {unAttrs = fromList []},
                                    paramName = VName (Name "eta_p") 9955,
                                    paramDec = Prim (FloatType Float32)
                                  },
                                  Param {
                                    paramAttrs = Attrs {unAttrs = fromList []},
                                    paramName = VName (Name "eta_p") 9956,
                                    paramDec = Prim (FloatType Float32)
                                  }
                                ],
                                lambdaReturnType = [Prim (FloatType Float32)],
                                lambdaBody = Body {
                                  bodyDec = (),
                                  bodyStms = fromList [
                                    Let {
                                      stmPat = Pat {patElems = [
                                        PatElem {
                                          patElemName = VName (Name "lifted_lambda_res") 9957,
                                          patElemDec = Prim (FloatType Float32)
                                        }
                                      ]},
                                      stmAux = StmAux {
                                        stmAuxCerts = Certs {unCerts = []},
                                        stmAuxAttrs = Attrs {unAttrs = fromList []},
                                        stmAuxDec = ()
                                      },
                                      stmExp = BasicOp (BinOp (FMul Float32) (Var (VName (Name "eta_p") 9955)) (Var (VName (Name "eta_p") 9956)))
                                    }
                                  ],
                                  bodyResult = [SubExpRes {
                                    resCerts = Certs {unCerts = []},
                                    resSubExp = Var (VName (Name "lifted_lambda_res") 9957)
                                  }]
                                }
                              },
                              scremaScans = [],
                              scremaReduces = [
                                Reduce {
                                  redComm = Noncommutative,
                                  redLambda = Lambda {
                                    lambdaParams = [
                                      Param {
                                        paramAttrs = Attrs {unAttrs = fromList []},
                                        paramName = VName (Name "eta_p") 9958,
                                        paramDec = Prim (FloatType Float32)
                                      },
                                      Param {
                                        paramAttrs = Attrs {unAttrs = fromList []},
                                        paramName = VName (Name "eta_p") 9959,
                                        paramDec = Prim (FloatType Float32)
                                      }
                                    ],
                                    lambdaReturnType = [Prim (FloatType Float32)],
                                    lambdaBody = Body {
                                      bodyDec = (),
                                      bodyStms = fromList [
                                        Let {
                                          stmPat = Pat {patElems = [
                                            PatElem {
                                              patElemName = VName (Name "defunc_0_op_res") 9960,
                                              patElemDec = Prim (FloatType Float32)
                                            }
                                          ]},
                                          stmAux = StmAux {
                                            stmAuxCerts = Certs {unCerts = []},
                                            stmAuxAttrs = Attrs {unAttrs = fromList []},
                                            stmAuxDec = ()
                                          },
                                          stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9958)) (Var (VName (Name "eta_p") 9959)))
                                        }
                                      ],
                                      bodyResult = [SubExpRes {
                                        resCerts = Certs {unCerts = []},
                                        resSubExp = Var (VName (Name "defunc_0_op_res") 9960)
                                      }]
                                    }
                                  },
                                  redNeutral = [Constant (FloatValue (Float32Value 0.0))]
                                }
                              ]
                            }))
                          }
                        ],
                        bodyResult = [SubExpRes {
                          resCerts = Certs {unCerts = []},
                          resSubExp = Var (VName (Name "defunc_0_reduce_res") 9954)
                        }]
                      }
                    },
                    scremaScans = [],
                    scremaReduces = [
                      Reduce {
                        redComm = Noncommutative,
                        redLambda = Lambda {
                          lambdaParams = [
                            Param {
                              paramAttrs = Attrs {unAttrs = fromList []},
                              paramName = VName (Name "eta_p") 9961,
                              paramDec = Prim (FloatType Float32)
                            },
                            Param {
                              paramAttrs = Attrs {unAttrs = fromList []},
                              paramName = VName (Name "eta_p") 9962,
                              paramDec = Prim (FloatType Float32)
                            }
                          ],
                          lambdaReturnType = [Prim (FloatType Float32)],
                          lambdaBody = Body {
                            bodyDec = (),
                            bodyStms = fromList [
                              Let {
                                stmPat = Pat {patElems = [
                                  PatElem {
                                    patElemName = VName (Name "defunc_0_op_res") 9963,
                                    patElemDec = Prim (FloatType Float32)
                                  }
                                ]},
                                stmAux = StmAux {
                                  stmAuxCerts = Certs {unCerts = []},
                                  stmAuxAttrs = Attrs {unAttrs = fromList []},
                                  stmAuxDec = ()
                                },
                                stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9961)) (Var (VName (Name "eta_p") 9962)))
                              }
                            ],
                            bodyResult = [SubExpRes {
                              resCerts = Certs {unCerts = []},
                              resSubExp = Var (VName (Name "defunc_0_op_res") 9963)
                            }]
                          }
                        },
                        redNeutral = [Constant (FloatValue (Float32Value 0.0))]
                      }
                    ]
                  }))
                }
              ],
              bodyResult = [SubExpRes {
                resCerts = Certs {unCerts = []},
                resSubExp = Var (VName (Name "defunc_0_reduce_res") 9951)
              }]
            }
          },
          scremaScans = [],
          scremaReduces = [
            Reduce {
              redComm = Noncommutative,
              redLambda = Lambda {
                lambdaParams = [
                  Param {
                    paramAttrs = Attrs {unAttrs = fromList []},
                    paramName = VName (Name "eta_p") 9964,
                    paramDec = Prim (FloatType Float32)
                  },
                  Param {
                    paramAttrs = Attrs {unAttrs = fromList []},
                    paramName = VName (Name "eta_p") 9965,
                    paramDec = Prim (FloatType Float32)
                  }
                ],
                lambdaReturnType = [Prim (FloatType Float32)],
                lambdaBody = Body {
                  bodyDec = (),
                  bodyStms = fromList [
                    Let {
                      stmPat = Pat {patElems = [
                        PatElem {
                          patElemName = VName (Name "defunc_0_op_res") 9966,
                          patElemDec = Prim (FloatType Float32)
                        }
                      ]},
                      stmAux = StmAux {
                        stmAuxCerts = Certs {unCerts = []},
                        stmAuxAttrs = Attrs {unAttrs = fromList []},
                        stmAuxDec = ()
                      },
                      stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9964)) (Var (VName (Name "eta_p") 9965)))
                    }
                  ],
                  bodyResult = [SubExpRes {
                    resCerts = Certs {unCerts = []},
                    resSubExp = Var (VName (Name "defunc_0_op_res") 9966)
                  }]
                }
              },
              redNeutral = [Constant (FloatValue (Float32Value 0.0))]
            }
          ]
        }))
      }
    ],
    kernelBodyResult = [Returns ResultMaySimplify (Certs {unCerts = []}) (Var (VName (Name "defunc_0_reduce_res") 9948))]
  }))