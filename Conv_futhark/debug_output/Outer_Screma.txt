Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9971, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = [VName (Name "index_certs") 9969]}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Var (VName (Name "num_in_ch") 7815)) [VName (Name "zip_copy_transformed") 9954,VName (Name "index") 9970] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "zip_copy_transformed_row") 9972, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "zip_copy_transformed_row") 9973, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5)),Constant (IntValue (Int64Value 5))]}) NoUniqueness}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9974, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [VName (Name "zip_copy_transformed_row") 9973,VName (Name "zip_copy_transformed_row") 9972] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9975, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5))]}) NoUniqueness},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9976, paramDec = Array (FloatType Float32) (Shape {shapeDims = [Constant (IntValue (Int64Value 5))]}) NoUniqueness}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_reduce_res") 9977, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = Op (OtherOp (Screma (Constant (IntValue (Int64Value 5))) [VName (Name "eta_p") 9975,VName (Name "eta_p") 9976] (ScremaForm {scremaLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9978, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9979, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "lifted_lambda_res") 9980, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FMul Float32) (Var (VName (Name "eta_p") 9978)) (Var (VName (Name "eta_p") 9979)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "lifted_lambda_res") 9980)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9981, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9982, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9983, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9981)) (Var (VName (Name "eta_p") 9982)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9983)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_reduce_res") 9977)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9984, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9985, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9986, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9984)) (Var (VName (Name "eta_p") 9985)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9986)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_reduce_res") 9974)}]}}, scremaScans = [], scremaReduces = [Reduce {redComm = Noncommutative, redLambda = Lambda {lambdaParams = [Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9987, paramDec = Prim (FloatType Float32)},Param {paramAttrs = Attrs {unAttrs = fromList []}, paramName = VName (Name "eta_p") 9988, paramDec = Prim (FloatType Float32)}], lambdaReturnType = [Prim (FloatType Float32)], lambdaBody = Body {bodyDec = (), bodyStms = fromList [Let {stmPat = Pat {patElems = [PatElem {patElemName = VName (Name "defunc_0_op_res") 9989, patElemDec = Prim (FloatType Float32)}]}, stmAux = StmAux {stmAuxCerts = Certs {unCerts = []}, stmAuxAttrs = Attrs {unAttrs = fromList []}, stmAuxDec = ()}, stmExp = BasicOp (BinOp (FAdd Float32) (Var (VName (Name "eta_p") 9987)) (Var (VName (Name "eta_p") 9988)))}], bodyResult = [SubExpRes {resCerts = Certs {unCerts = []}, resSubExp = Var (VName (Name "defunc_0_op_res") 9989)}]}}, redNeutral = [Constant (FloatValue (Float32Value 0.0))]}]})))}